class OrbitPlayer{constructor(e,t={}){this.options=Object.assign({autoplay:!1,muted:!1,controls:!0},t),this.video=document.querySelector(e),this.init()}init(){this.setupPlayer(),this.setupProviders(),this.setupControls(),this.setupEvents()}setupPlayer(){this.container=document.createElement("div"),this.container.className="orbit-player",this.video.parentNode.insertBefore(this.container,this.video),this.container.appendChild(this.video),this.spinner=document.createElement("div"),this.spinner.className="orbit-spinner",this.container.appendChild(this.spinner),/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)&&this.container.classList.add("mobile")}setupProviders(){const e=this.video.src;if(e.includes(".m3u8")){const t=document.createElement("script");t.src="https://cdn.jsdelivr.net/npm/hls.js@latest",t.onload=()=>{if(Hls.isSupported()){const t=new Hls;t.loadSource(e),t.attachMedia(this.video)}},document.head.appendChild(t)}}setupControls(){this.controls=document.createElement("div"),this.controls.className="orbit-controls",this.controls.innerHTML=`
            <div class="orbit-progress">
                <div class="orbit-progress-bar"></div>
            </div>
            <div class="orbit-buttons">
                <div class="orbit-left">
                    <button class="orbit-button orbit-play">
                        <svg viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
                    </button>
                    <div class="orbit-volume">
                        <button class="orbit-button orbit-mute">
                            <svg viewBox="0 0 24 24"><path d="M3 9v6h4l5 5V4L7 9H3z"/></svg>
                        </button>
                        <div class="orbit-volume-slider">
                            <div class="orbit-volume-bar"></div>
                        </div>
                    </div>
                    <div class="orbit-time">0:00 / 0:00</div>
                </div>
                <div class="orbit-right">
                    <button class="orbit-button orbit-fullscreen">
                        <svg viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg>
                    </button>
                </div>
            </div>`,this.container.appendChild(this.controls)}setupEvents(){const e=this.controls.querySelector(".orbit-play");e.addEventListener("click",()=>{this.video.paused?this.video.play():this.video.pause()});const t=this.controls.querySelector(".orbit-mute");t.addEventListener("click",()=>{this.video.muted=!this.video.muted,this.updateVolumeUI()});const s=this.controls.querySelector(".orbit-volume-slider");s.addEventListener("click",e=>{const t=s.getBoundingClientRect(),i=(e.clientX-t.left)/t.width;this.video.volume=Math.max(0,Math.min(1,i)),this.updateVolumeUI()});const i=this.controls.querySelector(".orbit-progress");i.addEventListener("click",e=>{const t=i.getBoundingClientRect(),s=(e.clientX-t.left)/t.width;this.video.currentTime=s*this.video.duration});const n=this.controls.querySelector(".orbit-fullscreen");n.addEventListener("click",()=>{document.fullscreenElement?document.exitFullscreen():this.container.requestFullscreen()}),this.video.addEventListener("play",()=>{const t=this.controls.querySelector(".orbit-play svg");t.innerHTML='<path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>'}),this.video.addEventListener("pause",()=>{const t=this.controls.querySelector(".orbit-play svg");t.innerHTML='<path d="M8 5v14l11-7z"/>'}),this.video.addEventListener("timeupdate",()=>{this.updateProgress(),this.updateTime()}),this.video.addEventListener("waiting",()=>{this.container.classList.add("loading")}),this.video.addEventListener("playing",()=>{this.container.classList.remove("loading")}),this.video.addEventListener("error",()=>{this.container.classList.add("error"),this.container.setAttribute("data-error","Video loading error")})}updateProgress(){const e=this.controls.querySelector(".orbit-progress-bar"),t=this.video.currentTime/this.video.duration*100;e.style.width=t+"%"}updateTime(){const e=this.controls.querySelector(".orbit-time");e.textContent=`${this.formatTime(this.video.currentTime)} / ${this.formatTime(this.video.duration)}`}updateVolumeUI(){const e=this.controls.querySelector(".orbit-volume-bar");e.style.width=100*(this.video.muted?0:this.video.volume)+"%"}formatTime(e){const t=Math.floor(e/60),s=Math.floor(e%60);return`${t}:${s<10?"0":""}${s}`}}
