class OrbitPlayer {
    constructor(selector, options = {}) {
        this.options = {
            autoplay: options.autoplay || false,
            theme: options.theme || 'modern-dark',
            controls: options.controls || true,
            title: options.title || '',
            poster: options.poster || '',
            quality: options.quality || 'auto',
            speed: options.speed || 1,
            volume: options.volume || 1,
            muted: options.muted || false,
            loop: options.loop || false,
            preload: options.preload || 'metadata',
            thumbnails: options.thumbnails || false,
            keyboard: options.keyboard !== false,
            tooltips: options.tooltips !== false,
            captions: options.captions || [],
            pipEnabled: options.pipEnabled !== false,
            airplayEnabled: options.airplayEnabled !== false,
            chromecastEnabled: options.chromecastEnabled !== false,
            autoHideControls: options.autoHideControls !== false,
            hideControlsDelay: options.hideControlsDelay || 2000,
            seekTime: options.seekTime || 10,
            volumeStep: options.volumeStep || 0.1,
            playbackRates: options.playbackRates || [0.5, 0.75, 1, 1.25, 1.5, 2]
        };

        this.video = (typeof selector === 'string') ? document.querySelector(selector) : selector;
        this.init();
    }

    init() {
        this.setupMediaProviders();
        this.createPlayerUI();
        this.setupControls();
        this.setupGestures();
        this.setupHotkeys();
        this.setupPlugins();
        this.setupEvents();
    }

    setupMediaProviders() {
        // HLS সাপোর্ট
        if (this.isHLSSource()) {
            this.loadHLS();
        }
        // DASH সাপোর্ট
        else if (this.isDASHSource()) {
            this.loadDASH();
        }
    }

    loadHLS() {
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/hls.js@latest';
        script.onload = () => {
            if (Hls.isSupported()) {
                const hls = new Hls({ 
                    autoStartLoad: true,
                    startLevel: -1,
                    debug: false,
                    capLevelOnFPSDrop: true,
                    maxBufferLength: 30,
                    maxMaxBufferLength: 600
                });
                hls.loadSource(this.video.src);
                hls.attachMedia(this.video);
                this.hls = hls;

                // Quality levels
                hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {
                    this.qualities = data.levels;
                    this.setupQualitySelector();
                });
            }
        };
        document.head.appendChild(script);
    }

    createPlayerUI() {
        this.container = document.createElement('div');
        this.container.className = `orbit-player ${this.options.theme}`;
        
        // Wrapper for video and overlays
        this.wrapper = document.createElement('div');
        this.wrapper.className = 'orbit-wrapper';
        
        // Create overlays
        this.createOverlays();
        
        // Move video into wrapper
        this.video.parentNode.insertBefore(this.container, this.video);
        this.wrapper.appendChild(this.video);
        this.container.appendChild(this.wrapper);
        
        // Add loader
        this.loader = document.createElement('div');
        this.loader.className = 'orbit-loader';
        this.wrapper.appendChild(this.loader);
    }

    createOverlays() {
        // Title overlay
        if (this.options.title) {
            this.titleOverlay = document.createElement('div');
            this.titleOverlay.className = 'orbit-title-overlay';
            this.titleOverlay.textContent = this.options.title;
            this.wrapper.appendChild(this.titleOverlay);
        }

        // Big play button overlay
        this.bigPlayButton = document.createElement('button');
        this.bigPlayButton.className = 'orbit-big-play-button';
        this.bigPlayButton.innerHTML = `
            <svg viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z"/>
            </svg>
        `;
        this.wrapper.appendChild(this.bigPlayButton);
    }

    setupControls() {
        this.controls = document.createElement('div');
        this.controls.className = 'orbit-controls';
        
        this.controls.innerHTML = `
            <div class="orbit-control-row top">
                <div class="orbit-title">${this.options.title}</div>
                <div class="orbit-top-buttons">
                    <button class="orbit-pip" title="Picture in Picture">
                        <svg>...</svg>
                    </button>
                    <button class="orbit-airplay" title="AirPlay">
                        <svg>...</svg>
                    </button>
                    <button class="orbit-chromecast" title="Chromecast">
                        <svg>...</svg>
                    </button>
                </div>
            </div>

            <div class="orbit-control-row middle">
                <button class="orbit-seek-backward" title="Backward ${this.options.seekTime}s">
                    <svg>...</svg>
                </button>
                <button class="orbit-play-large">
                    <svg>...</svg>
                </button>
                <button class="orbit-seek-forward" title="Forward ${this.options.seekTime}s">
                    <svg>...</svg>
                </button>
            </div>

            <div class="orbit-control-row bottom">
                <div class="orbit-progress-container">
                    <div class="orbit-progress-hover"></div>
                    <div class="orbit-progress">
                        <div class="orbit-progress-loaded"></div>
                        <div class="orbit-progress-played"></div>
                    </div>
                    <div class="orbit-progress-tooltip"></div>
                </div>

                <div class="orbit-controls-main">
                    <div class="orbit-control-left">
                        <button class="orbit-play" title="Play">
                            <svg class="play-icon">...</svg>
                            <svg class="pause-icon">...</svg>
                        </button>

                        <div class="orbit-volume">
                            <button class="orbit-mute" title="Mute">
                                <svg>...</svg>
                            </button>
                            <div class="orbit-volume-slider">
                                <div class="orbit-volume-track">
                                    <div class="orbit-volume-fill"></div>
                                </div>
                                <div class="orbit-volume-thumb"></div>
                            </div>
                        </div>

                        <div class="orbit-time">
                            <span class="orbit-time-current">0:00</span>
                            <span class="orbit-time-separator">/</span>
                            <span class="orbit-time-duration">0:00</span>
                        </div>
                    </div>

                    <div class="orbit-control-right">
                        <div class="orbit-speed" title="Playback Speed">
                            <button class="orbit-speed-button">1x</button>
                            <div class="orbit-speed-menu">
                                ${this.options.playbackRates.map(rate => 
                                    `<button data-speed="${rate}">${rate}x</button>`
                                ).join('')}
                            </div>
                        </div>

                        <div class="orbit-quality" title="Quality">
                            <button class="orbit-quality-button">AUTO</button>
                            <div class="orbit-quality-menu"></div>
                        </div>

                        <button class="orbit-captions" title="Captions">
                            <svg>...</svg>
                        </button>

                        <button class="orbit-settings" title="Settings">
                            <svg>...</svg>
                        </button>

                        <button class="orbit-fullscreen" title="Fullscreen">
                            <svg>...</svg>
                        </button>
                    </div>
                </div>
            </div>
        `;

        this.container.appendChild(this.controls);
        this.setupControlsEvents();
    }

    setupControlsEvents() {
        // Play/Pause
        this.controls.querySelector('.orbit-play').addEventListener('click', () => this.togglePlay());
        this.bigPlayButton.addEventListener('click', () => this.togglePlay());

        // Volume
        const volumeSlider = this.controls.querySelector('.orbit-volume-slider');
        volumeSlider.addEventListener('input', e => this.setVolume(e.target.value));
        this.controls.querySelector('.orbit-mute').addEventListener('click', () => this.toggleMute());

        // Progress bar
        const progressContainer = this.controls.querySelector('.orbit-progress-container');
        progressContainer.addEventListener('mousedown', e => this.handleSeek(e));
        progressContainer.addEventListener('mousemove', e => this.handleProgressHover(e));

        // Fullscreen
        this.controls.querySelector('.orbit-fullscreen').addEventListener('click', () => this.toggleFullscreen());

        // Speed control
        this.controls.querySelector('.orbit-speed-button').addEventListener('click', e => {
            this.controls.querySelector('.orbit-speed-menu').classList.toggle('active');
        });

        // Quality control
        this.controls.querySelector('.orbit-quality-button').addEventListener('click', e => {
            this.controls.querySelector('.orbit-quality-menu').classList.toggle('active');
        });

        // Settings
        this.controls.querySelector('.orbit-settings').addEventListener('click', e => {
            this.toggleSettings();
        });

        // PIP
        if (this.options.pipEnabled && document.pictureInPictureEnabled) {
            this.controls.querySelector('.orbit-pip').addEventListener('click', () => this.togglePiP());
        } else {
            this.controls.querySelector('.orbit-pip').style.display = 'none';
        }
    }

    setupGestures() {
        let touchStartX = 0;
        let touchStartY = 0;
        let touchStartTime = 0;

        this.container.addEventListener('touchstart', e => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
            touchStartTime = Date.now();
        });

        this.container.addEventListener('touchend', e => {
            const deltaX = e.changedTouches[0].clientX - touchStartX;
            const deltaY = e.changedTouches[0].clientY - touchStartY;
            const deltaTime = Date.now() - touchStartTime;

            // Double tap detection
            if (deltaTime < 300 && Math.abs(deltaX) < 20 && Math.abs(deltaY) < 20) {
                this.togglePlay();
            }

            // Swipe detection
            if (Math.abs(deltaX) > 100) {
                if (deltaX > 0) {
                    this.forward();
                } else {
                    this.rewind();
                }
            }
        });
    }

    setupHotkeys() {
        if (this.options.keyboard) {
            document.addEventListener('keydown', e => {
                if (!this.container.contains(document.activeElement)) return;

                switch(e.key.toLowerCase()) {
                    case ' ':
                    case 'k':
                        e.preventDefault();
                        this.togglePlay();
                        break;
                    case 'f':
                        e.preventDefault();
                        this.toggleFullscreen();
                        break;
                    case 'm':
                        e.preventDefault();
                        this.toggleMute();
                        break;
                    case 'arrowleft':
                        e.preventDefault();
                        this.rewind();
                        break;
                    case 'arrowright':
                        e.preventDefault();
                        this.forward();
                        break;
                    case 'arrowup':
                        e.preventDefault();
                        this.increaseVolume();
                        break;
                    case 'arrowdown':
                        e.preventDefault();
                        this.decreaseVolume();
                        break;
                }
            });
        }
    }

    // Helper methods
    togglePlay() {
        if (this.video.paused) {
            this.video.play();
            this.container.classList.add('playing');
        } else {
            this.video.pause();
            this.container.classList.remove('playing');
        }
    }

    setVolume(value) {
        this.video.volume = Math.max(0, Math.min(1, value));
        this.updateVolumeUI();
    }

    toggleMute() {
        this.video.muted = !this.video.muted;
        this.container.classList.toggle('muted', this.video.muted);
        this.updateVolumeUI();
    }

    handleSeek(e) {
        const rect = this.controls.querySelector('.orbit-progress').getBoundingClientRect();
        const pos = (e.clientX - rect.left) / rect.width;
        this.video.currentTime = pos * this.video.duration;
    }

    toggleFullscreen() {
        if (!document.fullscreenElement) {
            this.container.requestFullscreen();
        } else {
            document.exitFullscreen();
        }
    }

    // ... অন্যান্য মেথড
}

// গ্লোবাল স্কোপে এক্সপোজ
window.OrbitPlayer = OrbitPlayer;
